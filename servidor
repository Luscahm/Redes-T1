#!/usr/bin/env python3
import asyncio
from cgitb import text

from requests import request
from tcp import Servidor
import re

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''

    if dados == b'':
        return sair(conexao)

    if not dados.endswith(b'\r\n'):
        dados = list(filter((b'').__ne__, dados.split(b'\r\n')))
        conexao.dados_residuais += dados.pop()
    
    else:
        dados = list(filter((b'').__ne__, dados.split(b'\r\n')))  

    if dados:
        for message in dados:
            print(str(message))
            request, text = message.split(b' ', 1)

            if request == b'PING':
                conexao.enviar(b':server PONG server :' + text + b'\r\n')

            if request == b'NICK':
                if validar_nome(text):
                    if text.lower() in servidor.apelido_conexoes: #verificando se o nick ja  esta na lista do server
                        conexao.enviar(b':server 433 ' + conexao.nickid + b' ' + text + b' :Nickname is already in use\r\n')
                    elif conexao.nickid == b'*': 
                            conexao.enviar(b':server 001 ' + text + b' :Welcome\r\n' + b':server 422 ' + text + b' :MOTD File is missing\r\n')
                            servidor.apelido_conexoes[text.lower()] = conexao #adicionando a conexao nova ao dicionario da forma nick:conexao
                            conexao.nickid = text
                    else: 
                            conexao.enviar(b':' + conexao.nickid + b' NICK ' + text + b'\r\n')
                            servidor.apelido_conexoes.pop(conexao.nickid.lower()) # como iremos atualizar o nick, precisamos remover o antigo de nossa lista
                            servidor.apelido_conexoes[text.lower()] = conexao
                            conexao.nickid = text             
                else:
                    conexao.enviar(b':server 432 ' + conexao.nickid + b' ' + text + b' :Erroneous nickname\r\n') 
            if request == b'PRIVMSG':
                addressee, msg = text.split(b' ', 1)
                print('aqui')
                if addressee.startswith(b'#'):
                    if addressee.lower() in servidor.channels:
                        for key in servidor.channels[addressee.lower()]:
                            if servidor.channels[addressee.lower()][key] != conexao:
                                servidor.channels[addressee.lower()][key].enviar(b':' + conexao.nickid + b' PRIVMSG ' + addressee + b' ' + msg + b'\r\n')
                elif addressee.lower() in servidor.apelido_conexoes:
                    servidor.apelido_conexoes[addressee.lower()].enviar(b':' + conexao.nickid + b' PRIVMSG ' + addressee + b' ' + msg + b'\r\n')
            if request == b'JOIN':
                if text.startswith(b'#') and validar_nome(text[1:]):
                    if text.lower()  not in servidor.channels:
                        servidor.channels[text.lower()] = {}
                    servidor.channels[text.lower()][conexao.nickid.lower()] = conexao

                    for key in servidor.channels[text.lower()]:
                        servidor.channels[text.lower()][key].enviar(b':' + conexao.nickid + b' JOIN :' + text + b'\r\n')


                    
    print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.nickid = b'*'
    conexao.dados_residuais = b''
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.apelido_conexoes = {}
servidor.channels = {}
servidor.conexoes = []
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
